% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yml_bookdown.R
\name{yml_bookdown_opts}
\alias{yml_bookdown_opts}
\alias{yml_bookdown_site}
\title{Top-level YAML options for bookdown}
\usage{
yml_bookdown_opts(.yml, book_filename = yml_blank(),
  delete_merged_file = yml_blank(),
  before_chapter_script = yml_blank(),
  after_chapter_script = yml_blank(), edit = yml_blank(),
  history = yml_blank(), rmd_files = yml_blank(),
  rmd_subdir = yml_blank(), output_dir = yml_blank(),
  clean = yml_blank(), ...)

yml_bookdown_site(.yml)
}
\arguments{
\item{book_filename}{a character vector, the filename of the main Rmd file,
i.e., the Rmd file that is merged from all chapters. By default, it is
named "_main.Rmd".}

\item{delete_merged_file}{logical. Delete the main Rmd file if it exists?}

\item{before_chapter_script}{one or multiple R scripts to be executed before
each chapter}

\item{after_chapter_script}{similar to \code{before_chapter_script}, but the R
script is executed after each chapter}

\item{edit}{a URL that collaborators can click to edit the Rmd source
document of the current page; this was designed primarily for GitHub
repositories, since it is easy to edit arbitrary plain-text files on GitHub
even in other peopleâ€™s repositories (if you do not have write access to the
repository, GitHub will automatically fork it and let you submit a pull
request after you finish editing the file). This link should have \code{\%s} in
it, which will be substituted by the actual Rmd filename for each page.}

\item{history}{similar to \code{edit}, a link to the edit/commit history of the
current page}

\item{rmd_files}{a character vector, the order order of Rmd files for the
book. \code{rmd_files} can also be a named list where each element of the list
is named for the output type, e.g. "html" or "latex". By default, bookdown
merges all Rmd files by the order of filenames.}

\item{rmd_subdir}{whether to search for book source Rmd files in
subdirectories (by default, only the root directory is searched). This may
be either a boolean (e.g. true will search for book source Rmd files in the
project directory and all subdirectories) or list of paths if you want to
search for book source Rmd files in a subset of subdirectories}

\item{output_dir}{the output directory of the book ("_book" by default); this
setting is read and used by}

\item{clean}{a character vector of files and directories to be cleaned by the
\code{bookdown::clean_book()} function.}

\item{...}{additional named R objects, such as characters or lists, to
transform into YAML}
}
\value{
a \code{yml} object
}
\description{
bookdown uses YAML in three main places, as described in the \href{https://bookdown.org/yihui/rmarkdown/bookdown-project.html}{bookdown book}:
\code{index.Rmd}, \code{_output.yml}, and \code{_bookdown.yml}. \code{index.Rmd} can take most
YAML. \code{_output.yml} is intended for output-related YAML, such as that
produced by \code{yml() \%>\% yml_output(bookdown::pdf_book())}. \code{_bookdown.yml} is
intended for configuring the build of the book. Pass the results of the
\code{yml_*()} functions to \code{use_rmarkdown(path = "index.Rmd")}
\code{use_bookdown_yml()}, \code{use_output_yml()} to write them to these files.
}
\examples{

yml(author = FALSE, date = FALSE) \%>\%
  yml_bookdown_opts(
    book_filename = "my-book.Rmd",
    before_chapter_script = c("script1.R", "script2.R"),
    after_chapter_script = "script3.R",
    edit = "https =//github.com/rstudio/bookdown-demo/edit/master/\%s",
    output_dir = "book-output",
    clean = c("my-book.bbl", "R-packages.bib")
 )

yml(author = FALSE, date = FALSE) \%>\%
  yml_bookdown_opts(
    rmd_files = list(
      html = c("index.Rmd", "abstract.Rmd", "intro.Rmd"),
      latex = c("abstract.Rmd", "intro.Rmd")
    )
 )

 x <- yml(author = FALSE, date = FALSE) \%>\%
  yml_title("A Minimal Book Example") \%>\%
  yml_date(yml_code(Sys.Date())) \%>\%
  yml_author("Yihui Xie") \%>\%
  yml_bookdown_site() \%>\%
  yml_latex_opts(
    documentclass = "book",
    bibliography = c("book.bib", "packages.bib"),
    biblio_style = "apalike"
  ) \%>\%
  yml_citations(
    link_citations = TRUE
  ) \%>\%
  yml_description("This is a minimal example of using
  the bookdown package to write a book.")

x

# alternatively use `use_rmarkdown()` to write to file
# use_rmarkdown(x, "index.Rmd")

output_yml <- yml(author = FALSE, date = FALSE) \%>\%
  yml_output(
    bookdown::gitbook(
      lib_dir = "assets",
      split_by = "section",
      config = gitbook_config(toolbar_position = "static")
    ),
    bookdown::pdf_book(keep_tex = TRUE),
    bookdown::html_book(css = "toc.css")
  )

output_yml

# alternatively use `use_output_yml()` to write to `_output.yml`
# use_output_yml(output_yml)

}
\seealso{
\code{\link[=use_bookdown_yml]{use_bookdown_yml()}} \code{\link[=use_output_yml]{use_output_yml()}}

Other bookdown: \code{\link{gitbook_config}}
}
\concept{bookdown}
