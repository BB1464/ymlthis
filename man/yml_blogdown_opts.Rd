% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yml_blogdown.R
\name{yml_blogdown_opts}
\alias{yml_blogdown_opts}
\title{Top-level YAML options for blogdown}
\usage{
yml_blogdown_opts(.yml, draft = yml_blank(), publishdate = yml_blank(),
  weight = yml_blank(), slug = yml_blank(), aliases = yml_blank(),
  audio = yml_blank(), date = yml_blank(), description = yml_blank(),
  expiration_date = yml_blank(), headless = yml_blank(),
  images = yml_blank(), keywords = yml_blank(), layout = yml_blank(),
  lastmod = yml_blank(), link_title = yml_blank(),
  resources = yml_blank(), series = yml_blank(),
  summary = yml_blank(), title = yml_blank(), type = yml_blank(),
  url = yml_blank(), videos = yml_blank(), ...)
}
\arguments{
\item{.yml}{a \code{yml} object created by \code{yml()}, \code{as_yml()}, or passed through
a \code{yml_*()} function}

\item{draft}{You can mark a document as a draft by setting \code{TRUE}. Draft
posts will not be rendered if the site is built via
\code{blogdown::build_site()} or \code{blogdown::hugo_build()}, but will be rendered
in the local preview mode. See \href{https://bookdown.org/yihui/blogdown/local-preview.html#local-preview}{Section D.3 of the Blogdown book}.}

\item{publishdate}{You may specify a future date to publish a post. Similar
to draft posts, future posts are only rendered in the local preview mode}

\item{weight}{This field can take a numeric value to tell Hugo the order of
pages when sorting them, e.g., when you generate a list of all pages under
a directory, and two posts have the same date, you may assign different
weights to them to get your desired order on the list}

\item{slug}{A character string as the tail of the URL. It is particularly
useful when you define custom rules for permanent URLs See \href{https://bookdown.org/yihui/blogdown/configuration.html#options}{Section 2.2.2 of the Blogdown book}.}

\item{aliases}{an array of one or more aliases (e.g., old published paths of
renamed content) that will be created in the output directory structure}

\item{audio}{an array of paths to audio files related to the page}

\item{date}{the datetime assigned to this page. This is usually fetched from
the \code{date} field in front matter, but this behaviour is configurable.}

\item{description}{the description for the content}

\item{expiration_date}{the datetime at which the content should no longer be
published by Hugo; expired content will not be rendered unless the
--buildExpired flag is passed to the hugo command.}

\item{headless}{if true, sets a leaf bundle to be
\href{https://gohugo.io/content-management/page-bundles/#headless-bundle}{headless}.}

\item{images}{an array of paths to images related to the page}

\item{keywords}{the meta keywords for the content.}

\item{layout}{the layout Hugo should select from the lookup order when
rendering the content. If a type is not specified in the front matter, Hugo
will look for the layout of the same name in the layout directory that
corresponds with a contentâ€™s section. See \href{https://gohugo.io/content-management/types/#defining-a-content-type}{Defining a Content Type}.}

\item{lastmod}{the datetime at which the content was last modified.}

\item{link_title}{used for creating links to content}

\item{resources}{used for configuring page bundle resources. See \href{https://gohugo.io/content-management/page-resources/}{Page Resources}}

\item{series}{an array of series this page belongs to}

\item{summary}{text used when providing a summary of the article in the
.Summary page variable; details available in the
\href{https://gohugo.io/content-management/summaries/}{content-summaries}
section.}

\item{title}{the title for the content}

\item{type}{the type of the content; this value will be automatically derived
from the directory (i.e., the
\href{https://gohugo.io/content-management/sections/}{section}) if not specified
in front matter}

\item{url}{the full path to the content from the web root. It makes no
assumptions about the path of the content file. It also ignores any
language prefixes of the multilingual feature.}

\item{videos}{an array of paths to videos related to the page}

\item{...}{additional named R objects, such as characters or lists, to
transform into YAML}
}
\value{
a \code{yml} object
}
\description{
YAML in blogdown comes from a variety of sources. Technically, the
congifugration file for your blog can be in YAML, but this is not very
common; most use \code{config.toml}, based on TOML (see the \href{https://bookdown.org/yihui/blogdown/configuration.html}{blogdown book} for more). Most
YAML will be for your posts (which the \href{https://bookdown.org/yihui/blogdown/content.html#yaml-metadata}{blogdown book} also
describes). Common R Markdown fields can be used, but there are two other
main sources for YAML fields: Hugo itself and the theme you are using. Hugo
has numerous top-level YAML to control the output (see the \href{https://gohugo.io/content-management/front-matter/}{Hugo documentation}), and your
theme may add many more or none. \code{yml_blogdown_opts()} supports Hugo YAML. To
use YAML specific to your theme, see \code{\link[=blogdown_template]{blogdown_template()}}
}
\examples{

yml() \%>\%
  yml_blogdown_opts(
    draft = TRUE,
    slug = "blog-post"
  )
}
\seealso{
Other yml: \code{\link{bib2yml}},
  \code{\link{draw_yml_tree}},
  \code{\link{use_yml_defaults}},
  \code{\link{use_yml_file}}, \code{\link{use_yml}},
  \code{\link{yml_author}},
  \code{\link{yml_bookdown_opts}},
  \code{\link{yml_citations}}, \code{\link{yml_clean}},
  \code{\link{yml_distill_opts}},
  \code{\link{yml_latex_opts}}, \code{\link{yml_output}},
  \code{\link{yml_pagedown_opts}},
  \code{\link{yml_params}}, \code{\link{yml_pkgdown}},
  \code{\link{yml_reference}}, \code{\link{yml_replace}},
  \code{\link{yml_rsconnect_email}},
  \code{\link{yml_rticles_opts}},
  \code{\link{yml_runtime}}, \code{\link{yml_site_opts}},
  \code{\link{yml_vignette}}
}
\concept{yml}
